{"version":3,"sources":["logo.svg","ModelParam.js","queue.js","WaitTimeChart.js","WaitTimeInteractive.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ModelParam","Form","Group","key","this","props","controlId","className","Row","Col","md","Control","type","value","onChange","isInvalid","errors","Label","column","label","Feedback","React","Component","poisson","lambda","L","Math","exp","k","p","random","normalizedLambdas","numPeople","demandSchedule","startTime","endTime","res","resMs","steps","ceil","currTime","demand","Array","scheduleIdx","ts","length","Date","getTime","scale","reduce","a","b","map","d","simulateMdc","lambdas","numStations","stepsPerTest","runs","waitTimeHists","fill","el","i","Map","run","arrivals","arrivalTs","stations","serviceTs","s","waitTime","RED","FONT","PERCENTILES","BAND_ALPHAS","WaitTimeChart","bandsData","memoize","hists","percentileBands","medianXY","offset","floor","SMOOTH_WINDOW","maxTime","maxMedianTime","maxStep","undefined","percentiles","h","hist","Object","keys","sort","results","histKeys","histIdx","binHiRank","histSize","values","idx","nearestRank","max","histPercentiles","percentilesSmoothed","smoothed","signal","win","smoothLength","sub","slice","parseInt","smooth","push","y0","y","xy","cacheLimit","getTicks","bind","timeAxis","axis","stroke","strokeWidth","ticks","size","tick","tickLabels","fontFamily","fontSize","minutesAxis","maxMedianTimeLine","data","strokeDasharray","strokeLinecap","maxMedianTimeLabel","fontWeight","maxMedianTimeScatter","axisLabel","legend","labels","x","nextProps","separateStudentsStaff","peopleHists","studentHists","staffHists","peopleData","peopleMedian","peoplePercentiles","studentData","studentMedian","studentPercentiles","staffData","staffMedian","staffPercentiles","unstable","styles","getStyles","min","width","height","domain","style","fillOpacity","orientation","gutter","colorScale","name","round","labelComponent","textAnchor","dx","dy","text","standalone","tickValues","tickFormat","toLocaleTimeString","hour","minute","replace","dependentAxis","Alert","variant","MAX_WAIT","DAYS","8","10","12","14","MIN_TIME","mealtimes","increase","SCENARIOS","DEFAULT_SCENARIO","ParamSchema","Yup","shape","numStudents","integer","required","numStaff","numStudentTestingStations","numStaffTestingStations","numPeopleTestingStations","minutesPerTest","WaitTimeInteractive","state","peopleScenario","studentScenario","staffScenario","dayLength","simRunning","updateChart","onSeparationChange","onParamChange","onSelectChange","handleFormSubmit","e","setState","target","checked","id","actions","setSubmitting","then","Promise","resolve","reject","start","end","testLength","nStudents","nStaff","scStudents","scStaff","nStudentStations","nStaffStations","studentLambdas","staffLambdas","nPeople","nPeopleStations","scPeople","peopleLambdas","Container","class","ProgressBar","animated","now","validationSchema","initialValues","onSubmit","handleSubmit","handleChange","touched","isValid","isSubmitting","noValidate","as","Check","FormControl","defaultValue","scenarioOptions","hours","hr","Button","disabled","entries","App","href","src","logo","alt","Jumbotron","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.731526c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5691b2a9.svg\";","import React from 'react';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\n\nclass ModelParam extends React.Component {\n    render() {\n        return (\n            <Form.Group key={this.props.controlId} className=\"model-param\" controlId={this.props.controlId}>\n                <Row>\n                    <Col md={4}></Col>\n                    <Col md={2}>\n                        <Form.Control type=\"number\"\n                                      value={this.props.value}\n                                      onChange={this.props.onChange}\n                                      isInvalid={!!this.props.errors}\n                        />\n                    </Col>\n                <Form.Label column md={3}>{this.props.label}</Form.Label>\n                </Row>\n                {(() => {\n                    if (!!this.props.errors) {\n                        return (<Form.Control.Feedback type=\"invalid\">\n                                    <Row>\n                                        <Col md={4}></Col>\n                                        <Col md={4}><p>{this.props.errors}</p></Col>\n                                    </Row>\n                                </Form.Control.Feedback>\n                        );\n                    }\n                })()}\n            </Form.Group>\n        );\n    }\n}\n\nexport default ModelParam;\n","/**\n * @file Monte Carlo simulation of an M/D/c queue with variable arrival rates.\n * @author Parker J. Rule (@pjrule)\n */\n\nfunction poisson(lambda) {\n    /* Knuth's Poisson sampling algorithm (slow for large λ). */\n    let L = Math.exp(-lambda);\n    let k = 0;\n    let p = 1;\n    while (p > L) {\n        p *= Math.random();\n        k++;\n    }\n    return k - 1;\n}\n\nexport const smooth = function(signal, win) {\n    let offset = Math.floor(win / 2);\n    let smoothLength = signal.length - (2 * offset);\n    let smoothed = Array(smoothLength);\n    for (let ts = 0; ts < smoothLength; ts++) {\n        // TODO: handle null values if necessary\n        let sub = signal.slice(ts, ts + (2 * offset) + 1);\n        smoothed[ts] = sub.reduce((a, b) => parseInt(a) + parseInt(b)) / win;\n    }\n    return smoothed;\n}\n\nexport const normalizedLambdas = function(numPeople, demandSchedule, startTime, endTime, res) {\n    let resMs = 60 * 1000 * res;\n    let steps = Math.ceil((endTime - startTime) / resMs);\n    let currTime = startTime;\n    let demand = Array(steps);\n    let scheduleIdx = 0;\n    for (let ts = 0; ts < steps; ts++) {\n        while(scheduleIdx < demandSchedule.length - 1 && \n              demandSchedule[scheduleIdx + 1]['start'] <= currTime) {\n            scheduleIdx++;\n        }\n        demand[ts] = demandSchedule[scheduleIdx]['demand']\n        currTime = new Date(new Date(currTime).getTime() + resMs);\n    }\n    let totalDemand = demand.reduce((a, b) => a + b);\n    let scale = numPeople / totalDemand;\n    let normalized = demand.map(d => d * scale);\n    return normalized;\n}\n\nexport const histPercentiles = function(hist, p) {\n    /**\n     * Retrieves the values at (approximately) the specified percentiles\n     * in a histogram.\n     */\n    if (Object.keys(hist).length === 0) {\n        return null; // an empty histogram has no percentiles\n    } \n\n    p.sort((a, b) => a - b);\n    let results = Array(p.length).fill(0);\n    let histKeys = Object.keys(hist).sort((a, b) => a - b);\n    let histIdx = 0;\n    let binLoRank = 0;\n    let binHiRank = hist[histKeys[0]] - 1;\n    let histSize = Object.values(hist).reduce((a, b) => a + b);\n    for (let idx = 0; idx < p.length; idx++) {\n        let nearestRank = Math.max(0, Math.ceil(histSize * p[idx] / 100) - 1);\n        while (binHiRank < nearestRank && histIdx < histKeys.length - 1) {\n            binLoRank = binHiRank + 1;\n            binHiRank = binLoRank + hist[histKeys[histIdx]] - 1;\n            histIdx++;\n        }\n        results[idx] = histKeys[histIdx];\n    }\n    return results;\n}\n\n\nexport const simulateMdc = function(lambdas, numStations, stepsPerTest, runs) {\n    /**\n     * Simulates an M/D/c queue with variable arrival rates.\n     *\n     * @param TODO\n     * @return TODO\n     */\n    let steps = lambdas.length;\n    let waitTimeHists = Array(steps).fill(null).map((el, i) => new Map());\n    for (let run = 0; run < runs; run++) {\n        let arrivals = lambdas.map(poisson);\n        let arrivalTs = 0;\n        let stations = Array(numStations).fill(-1);\n        for (let serviceTs = 0; arrivalTs < steps; serviceTs++) {\n            for (let s = 0; s < numStations; s++) {\n                // Fill as many stations as possible at each timestep.\n                while (arrivals[arrivalTs] === 0 && arrivalTs < steps) {\n                    // Once all people who have arrived at a particular timestep\n                    // have been serviced, move to the people who arrived in the\n                    // next timestep.\n                    arrivalTs++;\n                }\n                if (arrivalTs > serviceTs || arrivalTs >= steps) {\n                    // Can't fulfill demand before it shows up.\n                    break;\n                }\n                if (stations[s] <= serviceTs) {\n                    // The current station is no longer being used.\n                    // Add a new person.\n                    stations[s] = serviceTs + stepsPerTest;\n                    let waitTime = serviceTs - arrivalTs;\n                    if (waitTime in waitTimeHists[arrivalTs]) {\n                        waitTimeHists[arrivalTs][waitTime] += 1;\n                    } else {\n                        waitTimeHists[arrivalTs][waitTime] = 1;\n                    }\n                    arrivals[arrivalTs]--;\n                }\n            }\n        }\n    }\n    return waitTimeHists;\n}\n","import React from 'react'\nimport Alert from 'react-bootstrap/Alert'\nimport { VictoryChart, VictoryLabel, VictoryLegend, VictoryGroup,\n        VictoryLine, VictoryArea, VictoryAxis, VictoryScatter } from 'victory'\nimport memoize from 'fast-memoize'\nimport { histPercentiles, smooth } from './queue'\n\n/* Styling */\nconst BLUE = '#4198c8'; // official MGGG blue\nconst RED = '#d1352b';  // red from Districtr\nconst GREEN = '#87ca3f'; // lightish green modified from Districtr\nconst STROKE_WIDTH = 4;\nconst FONT = \"'HK Grotesk', Helvetica, sans-serif\";\n\nconst PERCENTILES = [1, 5, 20, 50, 80, 95, 99];\nconst BAND_ALPHAS = [0.2, 0.35, 0.52, 0.52, 0.35, 0.2];\nconst SMOOTH_WINDOW = 15;\nconst MIN_WAIT = 10;\nconst MAX_WAIT = 120;\n\nclass WaitTimeChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTicks = this.getTicks.bind(this);\n    }\n\n    bandsData = memoize((hists) => {\n        let percentileBands = [];\n        let medianXY = [];\n        let offset = Math.floor(SMOOTH_WINDOW / 2);\n        let maxTime = 0;\n        let maxMedianTime = 0;\n        let steps = 0;\n        let maxStep = 0;\n        if (hists !== undefined) {\n            let percentiles = hists.map(h => histPercentiles(h, PERCENTILES));\n            let percentilesSmoothed = Array(PERCENTILES.length);\n            for (let idx = 0; idx < PERCENTILES.length; idx++) {\n                let percentileData = percentiles.map(p => p[idx]);\n                let smoothed = smooth(percentileData, SMOOTH_WINDOW);\n                percentilesSmoothed[idx] = smoothed;\n                if (PERCENTILES[idx] === 50) {\n                    steps = smoothed.length;\n                    for (let ts = 0; ts < smoothed.length; ts++) {\n                        medianXY.push({'x': ts + offset, 'y': smoothed[ts]});\n                        maxMedianTime = Math.max(smoothed[ts], maxMedianTime);\n                    }\n                    maxStep = smoothed.length + offset - 1;\n                }\n            }\n            for (let idx = 0; idx < BAND_ALPHAS.length; idx++) {\n                let y0 = percentilesSmoothed[idx];\n                let y = percentilesSmoothed[idx + 1];\n                let xy = Array(y.length);\n                for (let ts = 0; ts < y.length; ts++) {\n                    xy[ts] = {'x': ts + offset, 'y': y[ts], 'y0': y0[ts]};\n                    maxTime = Math.max(y[ts], maxTime);\n                }\n                percentileBands.push({'xy': xy, 'alpha': BAND_ALPHAS[idx]});\n            }\n        }\n        return {\n            'median': medianXY,\n            'percentiles': percentileBands,\n            'maxStep': maxStep,\n            'steps': steps,\n            'maxTime': maxTime,\n            'maxMedianTime': maxMedianTime\n        };\n    }, {cacheLimit: 256});\n\n    getStyles() {\n        return {\n            timeAxis: {\n                axis: { stroke: \"black\", strokeWidth: 1 },\n                ticks: {\n                    size: ({ tick }) => {\n                        if (tick % 60 === 0) {\n                            return 10;\n                        } else if (tick % 15 === 0) {\n                            return 5;\n                        }\n                        return 0;\n                    },\n                    stroke: \"black\",\n                    strokeWidth: 1\n                },\n                tickLabels: {\n                    fill: \"black\",\n                    fontFamily: FONT,\n                    fontSize: 9\n                }\n            },\n            minutesAxis: {\n                axis: { stroke: \"black\", strokeWidth: 1 },\n                ticks: {\n                    size: 3,\n                    stroke: \"black\",\n                    strokeWidth: 1\n                },\n                tickLabels: {\n                    fill: \"black\",\n                    fontFamily: FONT,\n                    fontSize: 9\n                }\n            },\n            maxMedianTimeLine: {\n                data: {\n                    stroke: \"#999\",\n                    strokeWidth: 0.8,\n                    strokeDasharray: \"1, 2\",\n                    strokeLinecap: \"round\"\n                }\n            },\n            maxMedianTimeLabel: [\n                {\n                    fill: \"black\",\n                    fontFamily: FONT,\n                    fontSize: 7\n                },\n                {\n                    fill: \"black\",\n                    fontFamily: FONT,\n                    fontSize: 7,\n                    fontWeight: 500\n                }\n            ],\n            maxMedianTimeScatter: {\n                data: {\n                    fill: \"#f9f9f9\"\n                }\n            },\n            axisLabel: {\n                fill: \"black\",\n                fontFamily: FONT,\n                fontSize: 10,\n                fontWeight: 500\n            },\n            legend: {\n                labels: {\n                    fill: \"black\",\n                    fontFamily: FONT,\n                    fontSize: 10\n                }\n            }\n        };\n    }\n\n    getTicks() {\n        if (this.props.startTime !== undefined && this.props.endTime !== undefined) {\n            let resMs = 60 * 1000;\n            let steps = Math.ceil((this.props.endTime - this.props.startTime) / resMs);\n            return [...Array(steps + 10).keys()].map(x => x - 5);\n        }\n        return [];\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return ((this.props.separateStudentsStaff !== nextProps.separateStudentsStaff) ||\n                (this.props.peopleHists !== nextProps.peopleHists) ||\n                (this.props.studentHists !== nextProps.studentHists) ||\n                (this.props.staffHists !== nextProps.staffHists));\n    }\n\n    render() {\n        const styles = this.getStyles();\n        const ticks = this.getTicks();\n\n        // FIXME: 😤😩 This is crying out to be replaced with a reusable \n        // `WaitTimeLine` component that wraps the percentile calculations\n        // and the rendering of the error bands. However, it seems that\n        // Victory has some weird binding stuff that I don't entirely\n        // understand which makes custom components very fragile.\n        // This works for now but should be patched up if things\n        // get more complicated.\n        let peopleData, peopleMedian, peoplePercentiles;\n        let studentData, studentMedian, studentPercentiles;\n        let staffData, staffMedian, staffPercentiles;\n        let maxTime, maxMedianTime, maxStep, steps, unstable;\n        if (this.props.separateStudentsStaff === true) {\n            studentData = this.bandsData(this.props.studentHists);\n            studentMedian = studentData['median'];\n            studentPercentiles = studentData['percentiles'];\n\n            staffData = this.bandsData(this.props.staffHists);\n            staffMedian = staffData['median'];\n            staffPercentiles = staffData['percentiles'];\n            maxTime = Math.max(studentData['maxTime'], staffData['maxTime']);\n            maxMedianTime = Math.max(studentData['maxMedianTime'],\n                                     staffData['maxMedianTime']);\n            steps = staffData['steps'];\n            maxStep = staffData['maxStep'];\n        } else {\n            peopleData = this.bandsData(this.props.peopleHists);\n            peopleMedian = peopleData['median'];\n            peoplePercentiles = peopleData['percentiles'];\n            maxTime = peopleData['maxTime'];\n            maxMedianTime = peopleData['maxMedianTime'];\n            steps = peopleData['steps'];\n            maxStep = peopleData['maxStep'];\n        }\n        maxTime = Math.min(Math.max(maxTime, MIN_WAIT), MAX_WAIT);\n        unstable = (maxTime >= MAX_WAIT);\n\n        return (\n            <>\n            <VictoryChart width={550} height={225} domain={{y: [0, maxTime]}}>\n                {(() => {\n                    if (this.props.separateStudentsStaff === true) {\n                        return [(\n                            <VictoryGroup\n                              style={{\n                                data: { strokeWidth: 3.5 }\n                              }}\n                            >\n                              <VictoryLine\n                                style={{\n                                  data: { stroke: RED }\n                                }}\n                                data={studentMedian}\n                              />\n                            </VictoryGroup>\n                        ),\n                        studentPercentiles.map(xy => {\n                                return (\n                                    <VictoryGroup\n                                      style={{\n                                        data: { strokeWidth: 0, fillOpacity: xy['alpha'] }\n                                      }}\n                                    >\n                                      <VictoryArea\n                                        style={{\n                                          data: { fill: RED, stroke: RED }\n                                        }}\n                                        data={xy['xy']}\n                                      />\n                                    </VictoryGroup>\n                                );\n                            }),\n                         (<VictoryGroup\n                              style={{\n                                data: { strokeWidth: STROKE_WIDTH }\n                              }}\n                            >\n                              <VictoryLine\n                                style={{\n                                  data: { stroke: GREEN }\n                                }}\n                                data={staffMedian}\n                              />\n                            </VictoryGroup>\n                        ),\n                        staffPercentiles.map(xy => {\n                                return (\n                                    <VictoryGroup\n                                      style={{\n                                        data: { strokeWidth: 0, fillOpacity: xy['alpha'] }\n                                      }}\n                                    >\n                                      <VictoryArea\n                                        style={{\n                                          data: { fill: GREEN, stroke: GREEN }\n                                        }}\n                                        data={xy['xy']}\n                                      />\n                                    </VictoryGroup>\n                                );\n                            }),\n                            (<VictoryLegend x={210} y={12}\n                              orientation=\"horizontal\"\n                              gutter={20}\n                              style={styles.legend}\n                              colorScale={[ RED, GREEN ]}\n                              data={[\n                                { name: \"Students\" }, { name: \"Staff\" }\n                              ]}\n                            />)\n                        ]\n\n                    } else {\n                        return [(\n                            <VictoryGroup\n                              style={{\n                                data: { strokeWidth: STROKE_WIDTH }\n                              }}\n                            >\n                              <VictoryLine\n                                style={{\n                                  data: { stroke: BLUE }\n                                }}\n                                data={peopleMedian}\n                              />\n                            </VictoryGroup>\n                        ),\n                        peoplePercentiles.map(xy => {\n                                return (\n                                    <VictoryGroup\n                                      style={{\n                                        data: { strokeWidth: 0, fillOpacity: xy['alpha'] }\n                                      }}\n                                    >\n                                      <VictoryArea\n                                        style={{\n                                          data: { fill: BLUE, stroke: BLUE }\n                                        }}\n                                        data={xy['xy']}\n                                      />\n                                    </VictoryGroup>\n                                );\n                            })]\n                        }\n                })()}\n                <VictoryLine style={styles.maxMedianTimeLine}\n                             data={[\n                                    {x: 0, y: maxMedianTime},\n                                    {x: maxStep, y: maxMedianTime}\n                             ]}\n                />\n                <VictoryScatter\n                  domain={[-10, 10]}\n                  data={[{ x: steps + 10, y: maxMedianTime }]}\n                  style={styles.maxMedianTimeScatter}\n                  labels={() => [\"maximum wait\", Math.round(maxMedianTime) + \" minutes\"]}\n                  labelComponent={\n                    <VictoryLabel\n                        textAnchor=\"start\"\n                        style={styles.maxMedianTimeLabel}\n                        dx={9}\n                        dy={11}\n                    />\n                  }\n                />\n                <VictoryLabel x={250} y={215}\n                              text=\"Arrival time\"\n                              style={styles.axisLabel}\n                />\n                <VictoryLabel x={42} y={24}\n                              text=\"Wait\"\n                              style={styles.axisLabel}\n                />\n                <VictoryLabel x={33} y={36}\n                              text=\"(minutes)\"\n                              style={styles.axisLabel}\n                />\n                <VictoryAxis\n                    standalone={false}\n                    style={styles.timeAxis}\n                    tickValues={ticks}\n                    tickFormat={\n                      (x) => {\n                          if (x % 60 === 0) {\n                              let date = new Date(new Date(this.props.startTime).getTime() +\n                                                  (x * 60 * 1000));\n                              let formatted = date.toLocaleTimeString('en-US',\n                                  { hour: '2-digit', minute: '2-digit', 'hour12': false });\n                              // strip leading zeros: https://stackoverflow.com/a/8276474\n                              return formatted.replace(/^0+/, '');\n                          }\n                          return '';\n                      }\n                    }\n              />\n              <VictoryAxis dependentAxis\n                orientation=\"left\"\n                standalone={false}\n                style={styles.minutesAxis}\n              />\n            </VictoryChart>\n            {(() => {\n                if (unstable) {\n                    return (\n                        <Alert key=\"unstable\" variant=\"danger\">\n                            <strong>This queue is unstable (wait times exceed {MAX_WAIT / 60} hours).</strong> Add more testing lines or reduce the number of people.\n                        </Alert>\n                    );\n                }\n            })()}\n            </>\n        );\n    }\n}\n\nexport default WaitTimeChart;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport ModelParam from './ModelParam';\nimport WaitTimeChart from './WaitTimeChart';\nimport { simulateMdc, normalizedLambdas } from './queue';\n\n/* --- Start constants --- */\n/* Monte Carlo parameters */\n\n// TODO: this could be adaptive\n// (figure out time per sim and do N seconds' worth of simulation)\nconst N_RUNS = 200; // number of Monte Carlo simulations\n\n/* Day lengths */\nconst DAYS = {\n    8: {\n        'start': new Date(2020, 1, 1, 8, 0, 0),\n        'end': new Date(2020, 1, 1, 16, 0, 0)\n    }, // 8-hour day (8 a.m. – 4 p.m.)\n    10: {\n        'start': new Date(2020, 1, 1, 8, 0, 0),\n        'end': new Date(2020, 1, 1, 18, 0, 0)\n    }, // 10-hour day (8 a.m. – 6 p.m.)\n    12: {\n        'start': new Date(2020, 1, 1, 8, 0, 0),\n        'end': new Date(2020, 1, 1, 20, 0, 0)\n    }, // 12-hour day (8 a.m. – 8 p.m.)\n    14: {\n        'start': new Date(2020, 1, 1, 8, 0, 0),\n        'end': new Date(2020, 1, 1, 22, 0, 0)\n    } // 14-hour day (8 a.m. – 10 p.m.)\n};\nconst DEFAULT_DAY = 12; // Use 12-hour day by default\nconst MIN_TIME = new Date(2020, 1, 1, 8, 0, 0);\n\n/* Demand scenarios */\nfunction mealtimes(increase) {\n    return [\n        // peak breakfast period: 8:30 a.m. – 9:30 a.m.\n        {'start': MIN_TIME, 'demand': 1},\n        {'start': new Date(2020, 1, 1, 8, 30, 0), 'demand': increase},\n        {'start': new Date(2020, 1, 1, 9, 30, 0), 'demand': 1},\n        // peak lunch period: 11:30 a.m. – 12:30 a.m.\n        {'start': new Date(2020, 1, 1, 11, 30, 0), 'demand': increase},\n        {'start': new Date(2020, 1, 1, 12, 30, 0), 'demand': 1},\n        // peak dinner period: 5:00 p.m. – 6:00 p.m.\n        {'start': new Date(2020, 1, 1, 17, 0, 0), 'demand': increase},\n        {'start': new Date(2020, 1, 1, 18, 0, 0), 'demand': 1},\n    ]\n}\n\nconst SCENARIOS = {\n    'Uniform demand': [\n        {'start': MIN_TIME, 'demand': 1}\n    ],\n    'Mealtime rush hours (3x increase)': mealtimes(3),\n    'Mealtime rush hours (5x increase)': mealtimes(5),\n    'Mealtime rush hours (7x increase)': mealtimes(7),\n};\nconst DEFAULT_SCENARIO = 'Mealtime rush hours (3x increase)';\n/* --- End constants --- */\n\nconst ParamSchema = Yup.object().shape({\n    numStudents: Yup.number()\n            .min(0, \"Number of students must be positive.\")\n            .max(20000, \"Only 20,000 students allowed per day.\")\n            .integer(\"Number of students must be an integer.\")\n            .required(\"Number of students is required.\"),\n    numStaff: Yup.number()\n            .min(0, \"Number of staff members must be positive.\")\n            .max(20000, \"Only 20,000 staff members allowed per day.\")\n            .integer(\"Number of staff members must be an integer.\")\n            .required(\"Number of staff members is required.\"),\n    numPeople: Yup.number()\n            .min(0, \"Number of people must be positive.\")\n            .max(40000, \"Only 40,000 people allowed per day.\")\n            .integer(\"Number of people must be an integer.\")\n            .required(\"Number of people is required.\"),\n    numStudentTestingStations: Yup.number()\n            .min(1, \"Must have at least one student testing line.\")\n            .max(500, \"Only 500 student testing lines allowed.\")\n            .integer(\"Number of student testing lines must be an integer.\")\n            .required(\"Number of student testing lines is required.\"),\n    numStaffTestingStations: Yup.number()\n            .min(1, \"Must have at least one staff testing line.\")\n            .max(500, \"Only 500 staff testing lines allowed.\")\n            .integer(\"Number of staff testing lines must be an integer.\")\n            .required(\"Number of staff testing lines is required.\"),\n    numPeopleTestingStations: Yup.number()\n            .min(1, \"Must have at least one testing line.\")\n            .max(1000, \"Only 1,000 testing lines allowed.\")\n            .integer(\"Number of testing lines must be an integer.\")\n            .required(\"Number of testing lines is required.\"),\n    minutesPerTest: Yup.number()\n            .min(1, \"A test should take at least one minute.\")\n            .max(30, \"A test should take at most 30 minutes.\")\n            .round()\n            .required(\"Must specify test length.\")\n});\n\nclass WaitTimeInteractive extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // TODO: remove (don't duplicate!)\n            numPeople: 1500,\n            numStudents: 1200,\n            numStaff: 300,\n            numPeopleTestingStations: 30,\n            numStudentTestingStations: 22,\n            numStaffTestingStations: 8,\n            minutesPerTest: 8,\n            peopleScenario: DEFAULT_SCENARIO,\n            studentScenario: DEFAULT_SCENARIO,\n            staffScenario: DEFAULT_SCENARIO,\n            dayLength: DEFAULT_DAY,\n            separateStudentsStaff: false,\n            simRunning: false,\n        };\n        this.updateChart = this.updateChart.bind(this);\n        this.onSeparationChange = this.onSeparationChange.bind(this);\n        this.onParamChange = this.onParamChange.bind(this);\n        this.onSelectChange = this.onSelectChange.bind(this);\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    }\n\n    /*\n     * generic `onChange` handler:\n     * https://medium.com/front-end-weekly/react-quick-tip-easy-data-\n     * binding-with-a-generic-onchange-handler-fb0254a7094e\n     */\n    onSeparationChange(e) {\n        this.setState({ [e.target.name]: e.target.checked },\n            function() {\n                if (this.state.studentHists === undefined ||\n                    this.state.staffHists === undefined ||\n                    this.state.peopleHists === undefined) {\n                    this.updateChart();\n                }\n            }\n        );\n    }\n\n    onParamChange(e)  {\n        this.setState({ [e.target.id]: e.target.value });\n    }\n\n    onSelectChange(e) {\n        this.setState({ [e.target.id]: e.target.value });\n    } \n\n    componentDidMount() {\n        this.updateChart();\n    }\n\n    handleFormSubmit(values, actions) {\n        // TODO: The progress bar still doesn't show up. :(\n        actions.setSubmitting(true);\n        this.setState({...values, 'simRunning': true}, () => {\n            this.updateChart().then(() => {\n                this.setState({'simRunning': false});\n            });\n        });\n        actions.setSubmitting(false);\n    }\n\n    updateChart() {\n        return new Promise((resolve, reject) => {\n            let start = DAYS[this.state.dayLength]['start'];\n            let end = DAYS[this.state.dayLength]['end'];\n            let testLength = parseInt(this.state.minutesPerTest);\n            if (this.state.separateStudentsStaff === true) {\n                let nStudents = parseInt(this.state.numStudents);\n                let nStaff = parseInt(this.state.numStaff);\n                let scStudents = SCENARIOS[this.state.studentScenario];\n                let scStaff = SCENARIOS[this.state.staffScenario];\n                let nStudentStations = parseInt(this.state.numStudentTestingStations);\n                let nStaffStations = parseInt(this.state.numStaffTestingStations);\n\n                let studentLambdas = normalizedLambdas(nStudents, scStudents, start, end, 1);\n                let staffLambdas = normalizedLambdas(nStaff, scStaff, start, end, 1);\n                let studentHists = simulateMdc(studentLambdas, nStudentStations, testLength, N_RUNS);\n                let staffHists = simulateMdc(staffLambdas, nStaffStations, testLength, N_RUNS);\n                this.setState({'studentHists': studentHists, 'staffHists': staffHists});\n            } else {\n                let nPeople = parseInt(this.state.numPeople);\n                let nPeopleStations = parseInt(this.state.numPeopleTestingStations);\n                let scPeople = SCENARIOS[this.state.peopleScenario];\n                let peopleLambdas = normalizedLambdas(nPeople, scPeople, start, end, 1);\n                let peopleHists = simulateMdc(peopleLambdas, nPeopleStations, testLength, N_RUNS);\n                this.setState({'peopleHists': peopleHists});\n            }\n            this.setState({'startTime': start, 'endTime': end});\n            resolve();\n        });\n    }\n\n    scenarioOptions() {\n        let scenarios = Object.keys(SCENARIOS).sort();\n        return scenarios.map(s => {\n            return <option key={s} value={s}>{s}</option>;\n        });\n    }\n\n    render() {\n        return (\n            <Container className=\"wait-time-interactive\">\n                <div className=\"wait-time-chart\">\n                    {(() => {\n                        if (this.state.simRunning) {\n                            return (\n                                <div class=\"wait-time-progress\">\n                                    <ProgressBar animated now={100} />\n                                </div>\n                            );\n                        } else {\n                            return (\n                                <WaitTimeChart separateStudentsStaff={this.state.separateStudentsStaff}\n                                               peopleHists={this.state.peopleHists}\n                                               studentHists={this.state.studentHists} \n                                               staffHists={this.state.staffHists}\n                                               startTime={this.state.startTime}\n                                               endTime={this.state.endTime}\n                                />\n                            );\n                        }\n                    })()}\n                </div>\n                <div className=\"wait-time-params\">\n                    <Formik validationSchema={ParamSchema}\n                            initialValues={{\n                                numPeople: 1500,\n                                numStudents: 1200,\n                                numStaff: 300,\n                                numPeopleTestingStations: 30,\n                                numStudentTestingStations: 22,\n                                numStaffTestingStations: 8,\n                                minutesPerTest: 8\n                            }}\n                            onSubmit={this.handleFormSubmit}>\n                        {({\n                            handleSubmit,\n                            handleChange,\n                            values,\n                            touched,\n                            isValid,\n                            errors,\n                            isSubmitting\n                        }) => (\n                        <Form noValidate onSubmit={handleSubmit}>\n                            <Form.Group as={Row} className=\"justify-content-center\" controlId=\"separateStudentsStaff\">\n                                <Col md={4}>\n                                    <Form.Check type=\"checkbox\"\n                                                name=\"separateStudentsStaff\"\n                                                label=\"Separate students and staff\"\n                                                checked={this.state.separateStudentsStaff}\n                                                onChange={this.onSeparationChange} />\n                                </Col>\n                            </Form.Group>\n                            {(() => {\n                                if (this.state.separateStudentsStaff) {\n                                    return (\n                                        <>\n                                        <Row>\n                                            <Col md={4} />\n                                            <Col md={4} className=\"demand-label\">\n                                                <label>Students</label>\n                                            </Col>\n                                        </Row>\n                                        <ModelParam controlId=\"numStudents\"\n                                                    value={values.numStudents}\n                                                    onChange={handleChange}\n                                                    label=\"per day\"\n                                                    errors={errors.numStudents}\n                                        />\n                                        <ModelParam controlId=\"numStudentTestingStations\"\n                                                    value={values.numStudentTestingStations}\n                                                    onChange={handleChange}\n                                                    label=\"testing lines\"\n                                                    errors={errors.numStudentTestingStations}\n                                        />\n                                        <Form.Group as={Row} controlId=\"studentScenario\">\n                                            <Col md={4} />\n                                            <Col md={4}>\n                                                <FormControl as=\"select\"\n                                                             key=\"studentScenario\"\n                                                             defaultValue={this.state.studentScenario}\n                                                             onChange={this.onSelectChange}>\n                                                    {this.scenarioOptions()}\n                                                </FormControl>\n                                            </Col>\n                                        </Form.Group>\n\n                                        <Row>\n                                            <Col md={4} />\n                                            <Col md={4} className=\"demand-label\">\n                                                <label>Staff</label>\n                                            </Col>\n                                        </Row>\n                                        <ModelParam controlId=\"numStaff\"\n                                                    value={values.numStaff}\n                                                    onChange={handleChange}\n                                                    label=\"per day\"\n                                                    errors={errors.numStaff}\n                                        />\n                                        <ModelParam controlId=\"numStaffTestingStations\"\n                                                    value={values.numStaffTestingStations}\n                                                    onChange={handleChange}\n                                                    label=\"testing lines\"\n                                                    errors={errors.numStaffTestingStations}\n                                        />\n                                        <Form.Group as={Row} controlId=\"staffScenario\">\n                                            <Col md={4} />\n                                            <Col md={4}>\n                                                <FormControl as=\"select\"\n                                                             key=\"staffScenario\"\n                                                             defaultValue={this.state.staffScenario}\n                                                             onChange={this.onSelectChange}>\n                                                    {this.scenarioOptions()}\n                                                </FormControl>\n                                            </Col>\n                                        </Form.Group>\n                                        </>\n                                    );\n                                } else {\n                                    return (\n                                        <>\n                                        <Row>\n                                            <Col md={4} />\n                                            <Col md={4} className=\"demand-label\">\n                                                <label>Demand</label>\n                                            </Col>\n                                        </Row>\n                                        <ModelParam controlId=\"numPeople\"\n                                                    value={values.numPeople}\n                                                    onChange={handleChange}\n                                                    label=\"people per day\"\n                                                    errors={errors.numPeople}\n                                        />\n                                        <ModelParam controlId=\"numPeopleTestingStations\"\n                                                    value={values.numPeopleTestingStations}\n                                                    onChange={handleChange}\n                                                    label=\"testing lines\"\n                                                    errors={errors.numPeopleTestingStations}\n                                        />\n                                        <Form.Group as={Row} className=\"justify-content-center\" controlId=\"peopleScenario\">\n                                            <Col md={4}>\n                                                <FormControl as=\"select\"\n                                                             key=\"peopleScenario\"\n                                                             defaultValue={this.state.peopleScenario}\n                                                             onChange={this.onSelectChange}>\n                                                    {this.scenarioOptions()}\n                                                </FormControl>\n                                            </Col>\n                                        </Form.Group>\n                                        </>\n                                    );\n                                }\n                            })()}\n\n                            <Row>\n                                <Col md={4} />\n                                <Col md={4} className=\"ops-label\">\n                                    <label>Operations</label>\n                                </Col>\n                            </Row>\n                            <ModelParam controlId=\"minutesPerTest\"\n                                        value={values.minutesPerTest}\n                                        onChange={handleChange}\n                                        label=\"minutes per test\"\n                                        errors={errors.minutesPerTest}\n                            />\n\n                            <Form.Group as={Row} className=\"justify-content-center\" controlId=\"dayLength\">\n                                <Col md={4}>\n                                    <FormControl as=\"select\"\n                                                 key=\"dayLength\"\n                                                 defaultValue={this.state.dayLength}\n                                                 onChange={this.onSelectChange}>\n                                        {(() => {\n                                            let hours = Object.keys(DAYS).map(s => parseInt(s));\n                                            hours = hours.sort((a, b) => a - b);\n                                            return hours.map(hr => {\n                                                return <option key={hr} value={hr}>{hr}-hour day</option>;\n                                            });\n                                        })()}\n                                    </FormControl>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row} className=\"justify-content-center\" controlId=\"simulateButton\">\n                                <Col md={4}>\n                                    <Button variant=\"primary\"\n                                            type=\"submit\"\n                                            className=\"simulate-button\"\n                                            disabled={Object.entries(errors).length > 0 || isSubmitting || this.state.simRunning}>\n                                        {this.state.simRunning ? \"Simulating...\" : \"Simulate\"}\n                                    </Button>\n                                </Col>\n                            </Form.Group>\n                        </Form>\n                        )}\n                    </Formik>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default WaitTimeInteractive;\n","import React from 'react';\nimport logo from './logo.svg'\nimport Container from 'react-bootstrap/Container'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport WaitTimeInteractive from './WaitTimeInteractive'\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"site-header\">\n                    <nav className=\"site-nav\">\n                        <a href=\"https://mggg.org\"><img src={logo} alt=\"MGGG\" className=\"logo\" /></a>\n                    </nav>\n                </header>\n\n                <main>\n                    <section className=\"interactive\">\n                        <Jumbotron fluid className=\"lead\">\n                            <Container>\n                                <div className=\"lead-text\">\n                                    <h1>Queueing for Campus Coronavirus Testing</h1>\n                                    <h2>or how to avoid long lines</h2>\n                                    <p>This tool models the impact of planning decisions on projected wait times for coronavirus testing.</p>\n                                </div>\n                                <div className=\"model-dropdown\">\n                                </div>\n                            </Container>\n                        </Jumbotron>\n                        <WaitTimeInteractive />\n                    </section>\n                    <hr />\n\n                    <section className=\"info\">\n                        <h2>How should I use this?</h2>\n                        <p>The efficiency of a surveillance testing operation depends both on planning choices and on some behavioral factors that are hard to predict.  This tool lets you experiment with different parameters of demand and operational planning, then performs simulations of participant arrival at testing facilities to predict wait times.  The underlying mathematical model comes from queueing theory, as explained below.</p>\n                        <p>The output shows the wait time over the course of the day.  The bold line is the median (50<sup>th</sup> percentile) of 200 simulations, and the shaded bands show the 20<sup>th</sup>-80<sup>th</sup>, 5<sup>th</sup>-95<sup>th</sup>, and 1<sup>st</sup>-99<sup>th</sup> percenties around the median.</p>\n                        <p>Use this tool separately for each campus of a university. If testing sites on the same campus are likely to have different levels of demand, consider each site separately.</p>\n                        <p>We welcome feedback and suggestions. To discuss this model or any of MGGG&apos;s <a href=\"https://mggg.github.io/covid-landing-page/index.html\">other coronavirus response projects</a>, please reach out at <a href=\"mailto:contact@mggg.org\">contact@mggg.org</a> or to PI Moon Duchin directly at <a href=\"mailto:Moon.Duchin@tufts.edu\">Moon.Duchin@tufts.edu</a>.</p>\n                    </section>\n                    <hr />\n\n                    <section className=\"info\">\n                        <h2>More about the model</h2>\n                        <p>This tool uses a <a href=\"https://en.wikipedia.org/wiki/Monte_Carlo_method\">Monte Carlo simulation</a> to approximate the behavior of an <a href=\"https://en.wikipedia.org/wiki/M/D/c_queue\">M/D/c queue</a>, which is a standard model from <a href=\"https://en.wikipedia.org/wiki/Queueing_theory\">queueing theory</a>. This type of queue assumes that arrivals follow a <a href=\"https://en.wikipedia.org/wiki/Poisson_point_process\">Poisson process</a>. In the simplest version of such a process, the average rate of arrival is fixed for the entire day.</p>\n                        <p>Our model allows for increased demand during mealtime &ldquo;rush hours&rdquo; (8:30 AM-9:30 AM, 11:30 AM-12:30 AM, and 5 PM–6 PM). In these scenarios, the average rate of arrival is increased by 3x, 5x, or 7x during rush hours relative to normal hours. In all cases, we assume that testing starts at 8 AM and is continuously available until 4 PM, 6 PM, 8 PM, or 10 PM.</p>\n                    </section>\n                </main>\n                \n                <footer className='footer mt-auto py-3'>\n                    <p>This is a summer 2020 project of <a href=\"https://mggg.org\">MGGG Redistricting Lab</a> at Tufts University&apos;s <a href=\"https://tischcollege.tufts.edu/\">Jonathan M. Tisch College of Civic Life</a> (led by <a href=\"https://pjrule.github.io/\">Parker J. Rule</a>). We are grateful for the major support of the National Science Foundation through the RAPID award OIA-2029788, Campus Coronavirus Response.</p>\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}