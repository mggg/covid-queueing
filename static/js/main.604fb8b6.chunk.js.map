{"version":3,"sources":["logo.svg","ModelParam.js","WaitTimeChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ModelParam","Form","Group","as","Row","className","controlId","this","props","Col","sm","Control","type","defaultValue","onChange","Label","column","label","React","Component","WaitTimeChart","onCheckChange","e","setState","target","name","checked","onFormChange","value","state","numStudents","numStaff","numUnifiedTestingStations","numStudentTestingStations","numStaffTestingStations","minutesPerTest","separateStudentsStaff","alert","Container","width","height","style","data","strokeWidth","fillOpacity","fill","stroke","x","y","Check","FormControl","Button","variant","onClick","updateChart","App","href","src","logo","alt","Jumbotron","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.604fb8b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5691b2a9.svg\";","import React from 'react';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\n\nclass ModelParam extends React.Component {\n    render() {\n        return (\n            <Form.Group as={Row} className=\"model-param\" controlId={this.props.controlId}>\n                <Col sm={4}></Col>\n                <Col sm={2}>\n                    <Form.Control type=\"number\"\n                                  defaultValue={this.props.defaultValue}\n                                  onChange={this.props.onChange} />\n                </Col>\n                <Form.Label column sm={3}>{this.props.label}</Form.Label>\n            </Form.Group>\n        );\n    }\n}\n\nexport default ModelParam;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport FormControl from 'react-bootstrap/FormControl'\nimport ModelParam from './ModelParam'\nimport { VictoryChart, VictoryGroup, VictoryArea } from 'victory'\n\nconst N_RUNS = 500; /* number of Monte Carlo simulations */\nconst RES = 1;      /* Simulation resolution in minutes */\nconst SCENARIOS = {\n};\n\nclass WaitTimeChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numStudents: 4000,\n            numStaff: 1000,\n            numUnifiedTestingStations: 10,\n            numStudentTestingStations: 8,\n            numStaffTestingStations: 2,\n            minutesPerTest: 5,\n            separateStudentsStaff: false\n        };\n    }\n\n    /*\n     * generic `onChange` handler:\n     * https://medium.com/front-end-weekly/react-quick-tip-easy-data-\n     * binding-with-a-generic-onchange-handler-fb0254a7094e\n     */\n    onCheckChange = e => this.setState({ [e.target.name]: e.target.checked })\n    onFormChange = e => this.setState({ [e.target.controlId]: e.target.value })\n\n    simulate() {\n    }\n\n    updateChart() {\n        alert(\"ello\");\n    }\n\n    render() {\n        return (\n            <Container className=\"wait-time-interactive\">\n                <div className=\"wait-time-chart\">\n                   <VictoryChart width={800} height={400}>\n                        <VictoryGroup\n                          style={{\n                            data: { strokeWidth: 3, fillOpacity: 0.4 }\n                          }}\n                        >\n                          <VictoryArea\n                            style={{\n                              data: { fill: \"cyan\", stroke: \"cyan\" }\n                            }}\n                            data={[\n                              { x: 1, y: 2 },\n                              { x: 2, y: 3 },\n                              { x: 3, y: 5 },\n                              { x: 4, y: 4 },\n                              { x: 5, y: 7 }\n                            ]}\n                          />\n                          <VictoryArea\n                            style={{\n                              data: { fill: \"magenta\", stroke: \"magenta\" }\n                            }}\n                            data={[\n                              { x: 1, y: 3 },\n                              { x: 2, y: 2 },\n                              { x: 3, y: 6 },\n                              { x: 4, y: 2 },\n                              { x: 5, y: 6 }\n                            ]}\n                          />\n                        </VictoryGroup>\n                    </VictoryChart>\n                </div>\n\n                <div className=\"wait-time-params\">\n                    <Form>\n                        <Form.Group as={Row} className=\"justify-content-center\" controlId=\"separateStudentsStaff\">\n                            <Col sm={4}>\n                                <Form.Check type=\"checkbox\"\n                                            name=\"separateStudentsStaff\"\n                                            label=\"Separate students and staff\"\n                                            checked={this.state.separateStudentsStaff}\n                                            onChange={this.onCheckChange} />\n                            </Col>\n                        </Form.Group>\n                        <ModelParam controlId=\"numStudents\"\n                                    defaultValue={this.state.numStudents}\n                                    onChange={this.onFormChange}\n                                    label=\"students\" />\n                        <ModelParam controlId=\"numStaff\"\n                                    defaultValue={this.state.numStaff}\n                                    onChange={this.onFormChange}\n                                    label=\"staff\" />\n\n                        {(() => {\n                            if (this.state.separateStudentsStaff) {\n                                return (\n                                    <>\n                                    <ModelParam controlId=\"numStudentTestingStations\"\n                                                defaultValue={this.state.numStudentTestingStations}\n                                                onChange={this.onFormChange}\n                                                label=\"student testing stations\" />\n                                    <ModelParam controlId=\"numStaffTestingStations\"\n                                                defaultValue={this.state.numStaffTestingStations}\n                                                onChange={this.onFormChange}\n                                                label=\"staff testing stations\" />\n                                    </>\n                                );\n                            } else {\n                                return (\n                                    <ModelParam controlId=\"numUnifiedTestingStations\"\n                                                defaultValue={this.state.numUnifiedTestingStations}\n                                                onChange={this.onFormChange}\n                                                label=\"testing stations\" />\n                                );\n                            }\n                        })()}\n\n                        <ModelParam controlId=\"minutesPerTest\"\n                                    defaultValue={this.state.minutesPerTest}\n                                    onChange={this.onFormChange}\n                                    label=\"minutes per test\" />\n                        <Form.Group as={Row} className=\"justify-content-center\" controlId=\"scenario\">\n                            <Col sm={4}>\n                                <FormControl as=\"select\">\n                                    <option>Uniform demand</option>\n                                    <option>Spikes around mealtimes</option>\n                                </FormControl>\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} className=\"justify-content-center\" controlId=\"dayLength\">\n                            <Col sm={4}>\n                                <FormControl as=\"select\">\n                                    <option>8-hour day</option>\n                                    <option>10-hour day</option>\n                                    <option>12-hour day</option>\n                                    <option>14-hour day</option>\n                                </FormControl>\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} className=\"justify-content-center\" controlId=\"simulateButton\">\n                            <Col sm={4}>\n                                <Button variant=\"primary\"\n                                        type=\"submit\"\n                                        className=\"simulate-button\"\n                                        onClick={this.updateChart}>Simulate</Button>\n                            </Col>\n                        </Form.Group>\n                    </Form>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default WaitTimeChart;\n","import React from 'react';\nimport logo from './logo.svg'\nimport Container from 'react-bootstrap/Container'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport WaitTimeChart from './WaitTimeChart'\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"site-header\">\n                    <nav className=\"site-nav\">\n                        <a href=\"https://mggg.org\"><img src={logo} alt=\"MGGG\" className=\"logo\" /></a>\n                    </nav>\n                </header>\n\n                <main>\n                    <section className=\"interactive\">\n                        <Jumbotron fluid className=\"lead\">\n                            <Container>\n                                <div className=\"lead-text\">\n                                    <h1>Queueing for Campus Coronavirus Testing</h1>\n                                    <p>or how to avoid long lines</p>\n                                </div>\n                                <div className=\"model-dropdown\">\n                                </div>\n                            </Container>\n                        </Jumbotron>\n                        <WaitTimeChart />\n                    </section>\n                    <hr />\n\n                    <section className=\"info\">\n                        <h2>How should I use this?</h2>\n                        <p>99th-percentile events might be important. Or they might not be. Who knows?</p>\n                        <p>Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.</p>\n                        <p>Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.</p>\n                        <p>Turnip greens yarrow ricebean rutabaga endive cauliflower sea lettuce kohlrabi amaranth water spinach avocado daikon napa cabbage asparagus winter purslane kale. Celery potato scallion desert raisin horseradish spinach carrot soko. Lotus root water spinach fennel kombu maize bamboo shoot green bean swiss chard seakale pumpkin onion chickpea gram corn pea. Brussels sprout coriander water chestnut gourd swiss chard wakame kohlrabi beetroot carrot watercress. Corn amaranth salsify bunya nuts nori azuki bean chickweed potato bell pepper artichoke.</p>\n                    </section>\n                    <hr />\n\n                    <section className=\"info\">\n                        <h2>More about the model</h2>\n                        <p>Queueing theory bla bla bla...</p>\n                        <p>Celery quandong swiss chard chicory earthnut pea potato. Salsify taro catsear garlic gram celery bitterleaf wattle seed collard greens nori. Grape wattle seed kombu beetroot horseradish carrot squash brussels sprout chard.</p>\n                        <p>Beetroot water spinach okra water chestnut ricebean pea catsear courgette summer purslane. Water spinach arugula pea tatsoi aubergine spring onion bush tomato kale radicchio turnip chicory salsify pea sprouts fava bean. Dandelion zucchini burdock yarrow chickpea dandelion sorrel courgette turnip greens tigernut soybean radish artichoke wattle seed endive groundnut broccoli arugula.</p>\n                    </section>\n                </main>\n                \n                <footer className='footer mt-auto py-3'>\n                    <p>This is a summer 2020 project of <a href=\"https://mggg.org\">MGGG Redistricting Lab</a> at Tufts University&apos;s <a href=\"https://tischcollege.tufts.edu/\">Jonathan M. Tisch College of Civic Life</a> with assistance from <a href=\"https://pjrule.github.io/\">Parker J. Rule</a>. We are grateful for the major support of the National Science Foundation through the Convergence Accelerator award OIA-1937095, Network Science of Census Data. (TODO: more recent grant here!)</p>\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}