{"version":3,"sources":["logo.svg","ModelParam.js","queue.js","WaitTimeChart.js","WaitTimeInteractive.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ModelParam","Form","Group","as","Row","key","this","props","controlId","className","Col","sm","Control","type","defaultValue","onChange","Label","column","label","React","Component","poisson","lambda","L","Math","exp","k","p","random","normalizedLambdas","numPeople","demandSchedule","startTime","endTime","res","resMs","steps","ceil","currTime","demand","Array","scheduleIdx","ts","length","Date","getTime","scale","reduce","a","b","map","d","simulateMdc","lambdas","numStations","stepsPerTest","runs","waitTimeHists","fill","el","i","Map","run","arrivals","arrivalTs","stations","serviceTs","s","waitTime","console","log","RED","FONT","PERCENTILES","BAND_ALPHAS","WaitTimeChart","getTicks","bind","hists","percentileBands","medianXY","offset","floor","SMOOTH_WINDOW","maxTime","undefined","percentiles","h","hist","Object","keys","sort","results","histKeys","histIdx","binHiRank","histSize","values","idx","nearestRank","max","histPercentiles","percentilesSmoothed","smoothed","signal","win","smoothLength","sub","slice","parseInt","smooth","push","y0","y","xy","timeAxis","axis","stroke","strokeWidth","ticks","size","tick","tickLabels","fontFamily","fontSize","minutesAxis","axisLabel","fontWeight","legend","labels","x","peopleData","peopleMedian","peoplePercentiles","studentData","studentMedian","studentPercentiles","staffData","staffMedian","staffPercentiles","unstable","styles","getStyles","separateStudentsStaff","bandsData","studentHists","staffHists","peopleHists","min","Alert","variant","MAX_WAIT","width","height","domain","style","data","fillOpacity","orientation","gutter","colorScale","name","text","standalone","tickValues","tickFormat","toLocaleTimeString","hour","minute","replace","dependentAxis","DAYS","8","10","12","14","MIN_TIME","mealtimes","increase","SCENARIOS","DEFAULT_SCENARIO","WaitTimeInteractive","state","numStudents","numStaff","numPeopleTestingStations","numStudentTestingStations","numStaffTestingStations","minutesPerTest","peopleScenario","studentScenario","staffScenario","dayLength","simRunning","updateChart","onSeparationChange","onParamChange","onSelectChange","e","setState","target","checked","id","value","start","end","testLength","nStudents","nStaff","scStudents","scStaff","nStudentStations","nStaffStations","studentLambdas","staffLambdas","nPeople","nPeopleStations","scPeople","peopleLambdas","Container","class","ProgressBar","animated","now","Check","FormControl","scenarioOptions","hours","hr","Button","onClick","App","href","src","logo","alt","Jumbotron","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1d2926c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5691b2a9.svg\";","import React from 'react';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\n\nclass ModelParam extends React.Component {\n    render() {\n        return (\n            <Form.Group as={Row} key={this.props.controlId} className=\"model-param\" controlId={this.props.controlId}>\n                <Col sm={4}></Col>\n                <Col sm={2}>\n                    <Form.Control type=\"number\"\n                                  defaultValue={this.props.defaultValue}\n                                  onChange={this.props.onChange} />\n                </Col>\n                <Form.Label column sm={3}>{this.props.label}</Form.Label>\n            </Form.Group>\n        );\n    }\n}\n\nexport default ModelParam;\n","/**\n * @file Monte Carlo simulation of an M/D/c queue with variable arrival rates.\n * @author Parker J. Rule (@pjrule)\n */\n\nfunction poisson(lambda) {\n    /* Knuth's Poisson sampling algorithm (slow for large λ). */\n    let L = Math.exp(-lambda);\n    let k = 0;\n    let p = 1;\n    while (p > L) {\n        p *= Math.random();\n        k++;\n    }\n    return k - 1;\n}\n\nexport const smooth = function(signal, win) {\n    let offset = Math.floor(win / 2);\n    let smoothLength = signal.length - (2 * offset);\n    let smoothed = Array(smoothLength);\n    for (let ts = 0; ts < smoothLength; ts++) {\n        // TODO: handle null values if necessary\n        let sub = signal.slice(ts, ts + (2 * offset) + 1);\n        smoothed[ts] = sub.reduce((a, b) => parseInt(a) + parseInt(b)) / win;\n    }\n    return smoothed;\n}\n\nexport const normalizedLambdas = function(numPeople, demandSchedule, startTime, endTime, res) {\n    let resMs = 60 * 1000 * res;\n    let steps = Math.ceil((endTime - startTime) / resMs);\n    let currTime = startTime;\n    let demand = Array(steps);\n    let scheduleIdx = 0;\n    for (let ts = 0; ts < steps; ts++) {\n        while(scheduleIdx < demandSchedule.length - 1 && \n              demandSchedule[scheduleIdx + 1]['start'] <= currTime) {\n            scheduleIdx++;\n        }\n        demand[ts] = demandSchedule[scheduleIdx]['demand']\n        currTime = new Date(new Date(currTime).getTime() + resMs);\n    }\n    let totalDemand = demand.reduce((a, b) => a + b);\n    let scale = numPeople / totalDemand;\n    let normalized = demand.map(d => d * scale);\n    return normalized;\n}\n\nexport const histPercentiles = function(hist, p) {\n    /**\n     * Retrieves the values at (approximately) the specified percentiles\n     * in a histogram.\n     */\n    if (Object.keys(hist).length === 0) {\n        return null; // an empty histogram has no percentiles\n    } \n\n    p.sort((a, b) => a - b);\n    let results = Array(p.length).fill(0);\n    let histKeys = Object.keys(hist).sort((a, b) => a - b);\n    let histIdx = 0;\n    let binLoRank = 0;\n    let binHiRank = hist[histKeys[0]] - 1;\n    let histSize = Object.values(hist).reduce((a, b) => a + b);\n    for (let idx = 0; idx < p.length; idx++) {\n        let nearestRank = Math.max(0, Math.ceil(histSize * p[idx] / 100) - 1);\n        while (binHiRank < nearestRank && histIdx < histKeys.length - 1) {\n            binLoRank = binHiRank + 1;\n            binHiRank = binLoRank + hist[histKeys[histIdx]] - 1;\n            histIdx++;\n        }\n        results[idx] = histKeys[histIdx];\n    }\n    return results;\n}\n\n\nexport const simulateMdc = function(lambdas, numStations, stepsPerTest, runs) {\n    /**\n     * Simulates an M/D/c queue with variable arrival rates.\n     *\n     * @param TODO\n     * @return TODO\n     */\n    let steps = lambdas.length;\n    let waitTimeHists = Array(steps).fill(null).map((el, i) => new Map());\n    for (let run = 0; run < runs; run++) {\n        let arrivals = lambdas.map(poisson);\n        let arrivalTs = 0;\n        let stations = Array(numStations).fill(-1);\n        for (let serviceTs = 0; arrivalTs < steps; serviceTs++) {\n            for (let s = 0; s < numStations; s++) {\n                // Fill as many stations as possible at each timestep.\n                while (arrivals[arrivalTs] === 0 && arrivalTs < steps) {\n                    // Once all people who have arrived at a particular timestep\n                    // have been serviced, move to the people who arrived in the\n                    // next timestep.\n                    arrivalTs++;\n                }\n                if (arrivalTs > serviceTs || arrivalTs >= steps) {\n                    // Can't fulfill demand before it shows up.\n                    break;\n                }\n                if (stations[s] <= serviceTs) {\n                    // The current station is no longer being used.\n                    // Add a new person.\n                    stations[s] = serviceTs + stepsPerTest;\n                    let waitTime = serviceTs - arrivalTs;\n                    if (waitTime in waitTimeHists[arrivalTs]) {\n                        waitTimeHists[arrivalTs][waitTime] += 1;\n                    } else {\n                        waitTimeHists[arrivalTs][waitTime] = 1;\n                    }\n                    arrivals[arrivalTs]--;\n                }\n            }\n        }\n    }\n    console.log(waitTimeHists);\n    return waitTimeHists;\n}\n","import React from 'react'\nimport Alert from 'react-bootstrap/Alert'\nimport { VictoryChart, VictoryLabel, VictoryLegend, VictoryGroup,\n        VictoryLine, VictoryArea, VictoryAxis } from 'victory'\nimport { histPercentiles, smooth } from './queue'\n\n/* Styling */\nconst BLUE = '#4198c8'; // official MGGG blue\nconst RED = '#d1352b';  // red from Districtr\nconst GREEN = '#87ca3f'; // lightish green modified from Districtr\nconst STROKE_WIDTH = 4;\nconst FONT = \"'HK Grotesk', Helvetica, sans-serif\";\n\nconst PERCENTILES = [1, 5, 20, 50, 80, 95, 99];\nconst MAX_P = 99;\nconst BAND_ALPHAS = [0.2, 0.35, 0.52, 0.52, 0.35, 0.2];\nconst SMOOTH_WINDOW = 15;\nconst MIN_WAIT = 10;\nconst MAX_WAIT = 120;\n\nclass WaitTimeChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getTicks = this.getTicks.bind(this);\n    }\n\n    bandsData(hists) {\n        let percentileBands = [];\n        let medianXY = [];\n        let offset = Math.floor(SMOOTH_WINDOW / 2);\n        let maxTime = 0;\n        if (hists !== undefined) {\n            let percentiles = hists.map(h => histPercentiles(h, PERCENTILES));\n            let percentilesSmoothed = Array(PERCENTILES.length);\n            for (let idx = 0; idx < PERCENTILES.length; idx++) {\n                let percentileData = percentiles.map(p => p[idx]);\n                let smoothed = smooth(percentileData, SMOOTH_WINDOW);\n                percentilesSmoothed[idx] = smoothed;\n                if (PERCENTILES[idx] === 50) {\n                    for (let ts = 0; ts < smoothed.length; ts++) {\n                        medianXY.push({'x': ts + offset, 'y': smoothed[ts]});\n                    }\n                }\n            }\n            for (let idx = 0; idx < BAND_ALPHAS.length; idx++) {\n                let y0 = percentilesSmoothed[idx];\n                let y = percentilesSmoothed[idx + 1];\n                let xy = Array(y.length);\n                for (let ts = 0; ts < y.length; ts++) {\n                    xy[ts] = {'x': ts + offset, 'y': y[ts], 'y0': y0[ts]};\n                    maxTime = Math.max(y[ts], maxTime);\n                }\n                percentileBands.push({'xy': xy, 'alpha': BAND_ALPHAS[idx]});\n            }\n        }\n        return {\n            'median': medianXY, \n            'percentiles': percentileBands,\n            'maxTime': maxTime\n        };\n    }\n\n    getStyles() {\n        return {\n            timeAxis: {\n                axis: { stroke: \"black\", strokeWidth: 1 },\n                ticks: {\n                    size: ({ tick }) => {\n                        if (tick % 60 === 0) {\n                            return 10;\n                        } else if (tick % 15 === 0) {\n                            return 5;\n                        }\n                        return 0;\n                    },\n                    stroke: \"black\",\n                    strokeWidth: 1\n                },\n                tickLabels: {\n                    fill: \"black\",\n                    fontFamily: FONT,\n                    fontSize: 9\n                }\n            },\n            minutesAxis: {\n                axis: { stroke: \"black\", strokeWidth: 1 },\n                ticks: {\n                    size: 3,\n                    stroke: \"black\",\n                    strokeWidth: 1\n                },\n                tickLabels: {\n                    fill: \"black\",\n                    fontFamily: FONT,\n                    fontSize: 9\n                }\n            },\n            axisLabel: {\n                fill: \"black\",\n                fontFamily: FONT,\n                fontSize: 10,\n                fontWeight: 500\n            },\n            legend: {\n                labels: {\n                    fill: \"black\",\n                    fontFamily: FONT,\n                    fontSize: 10\n                }\n            }\n        };\n    }\n\n    getTicks() {\n        if (this.props.startTime !== undefined && this.props.endTime !== undefined) {\n            let resMs = 60 * 1000;\n            let steps = Math.ceil((this.props.endTime - this.props.startTime) / resMs);\n            return [...Array(steps + 10).keys()].map(x => x - 5);\n        }\n        return [];\n    }\n\n    render() {\n        const styles = this.getStyles();\n        const ticks = this.getTicks();\n        console.log(\"timeAxis:\",  styles.timeAxis);\n\n        // FIXME: 😤😩 This is crying out to be replaced with a reusable \n        // `WaitTimeLine` component that wraps the percentile calculations\n        // and the rendering of the error bands. However, it seems that\n        // Victory has some weird binding stuff that I don't entirely\n        // understand which makes custom components very fragile.\n        // This works for now but should be patched up if things\n        // get more complicated.\n        let peopleData, peopleMedian, peoplePercentiles;\n        let studentData, studentMedian, studentPercentiles;\n        let staffData, staffMedian, staffPercentiles;\n        let maxTime, unstable;\n        if (this.props.separateStudentsStaff === true) {\n            studentData = this.bandsData(this.props.studentHists);\n            studentMedian = studentData['median'];\n            studentPercentiles = studentData['percentiles'];\n\n            staffData = this.bandsData(this.props.staffHists);\n            staffMedian = staffData['median'];\n            staffPercentiles = staffData['percentiles'];\n            maxTime = Math.max(studentData['maxTime'], staffData['maxTime']);\n        } else {\n            peopleData = this.bandsData(this.props.peopleHists);\n            peopleMedian = peopleData['median'];\n            peoplePercentiles = peopleData['percentiles'];\n            maxTime = peopleData['maxTime'];\n        }\n        maxTime = Math.min(Math.max(maxTime, MIN_WAIT), MAX_WAIT);\n        unstable = (maxTime >= MAX_WAIT);\n\n        return (\n            <>\n            {(() => {\n                if (unstable) {\n                    return (\n                        <Alert key=\"unstable\" variant=\"danger\">\n                            <strong>This queue is unstable (wait times exceed {MAX_WAIT / 60} hours).</strong> Add more testing lines or reduce the number of people.\n                        </Alert>\n                    );\n                }\n            })()}\n            <VictoryChart width={600} height={250} domain={{y: [0, maxTime]}}>\n                {(() => {\n                    if (this.props.separateStudentsStaff === true) {\n                        return [(\n                            <VictoryGroup\n                              style={{\n                                data: { strokeWidth: 3.5 }\n                              }}\n                            >\n                              <VictoryLine\n                                style={{\n                                  data: { stroke: RED }\n                                }}\n                                data={studentMedian}\n                              />\n                            </VictoryGroup>\n                        ),\n                        studentPercentiles.map(xy => {\n                                return (\n                                    <VictoryGroup\n                                      style={{\n                                        data: { strokeWidth: 0, fillOpacity: xy['alpha'] }\n                                      }}\n                                    >\n                                      <VictoryArea\n                                        style={{\n                                          data: { fill: RED, stroke: RED }\n                                        }}\n                                        data={xy['xy']}\n                                      />\n                                    </VictoryGroup>\n                                );\n                            }),\n                         (<VictoryGroup\n                              style={{\n                                data: { strokeWidth: STROKE_WIDTH }\n                              }}\n                            >\n                              <VictoryLine\n                                style={{\n                                  data: { stroke: GREEN }\n                                }}\n                                data={staffMedian}\n                              />\n                            </VictoryGroup>\n                        ),\n                        staffPercentiles.map(xy => {\n                                return (\n                                    <VictoryGroup\n                                      style={{\n                                        data: { strokeWidth: 0, fillOpacity: xy['alpha'] }\n                                      }}\n                                    >\n                                      <VictoryArea\n                                        style={{\n                                          data: { fill: GREEN, stroke: GREEN }\n                                        }}\n                                        data={xy['xy']}\n                                      />\n                                    </VictoryGroup>\n                                );\n                            }),\n                            (<VictoryLegend x={235} y={10}\n                              orientation=\"horizontal\"\n                              gutter={20}\n                              style={styles.legend}\n                              colorScale={[ RED, GREEN ]}\n                              data={[\n                                { name: \"Students\" }, { name: \"Staff\" }\n                              ]}\n                            />)\n                        ]\n\n                    } else {\n                        return [(\n                            <VictoryGroup\n                              style={{\n                                data: { strokeWidth: STROKE_WIDTH }\n                              }}\n                            >\n                              <VictoryLine\n                                style={{\n                                  data: { stroke: BLUE }\n                                }}\n                                data={peopleMedian}\n                              />\n                            </VictoryGroup>\n                        ),\n                        peoplePercentiles.map(xy => {\n                                return (\n                                    <VictoryGroup\n                                      style={{\n                                        data: { strokeWidth: 0, fillOpacity: xy['alpha'] }\n                                      }}\n                                    >\n                                      <VictoryArea\n                                        style={{\n                                          data: { fill: BLUE, stroke: BLUE }\n                                        }}\n                                        data={xy['xy']}\n                                      />\n                                    </VictoryGroup>\n                                );\n                            })]\n                        }\n                })()}\n                <VictoryLabel x={275} y={240}\n                              text=\"Arrival time\"\n                              style={styles.axisLabel}\n                />\n                <VictoryLabel x={42} y={26}\n                              text=\"Wait\"\n                              style={styles.axisLabel}\n                />\n                <VictoryLabel x={33} y={38}\n                              text=\"(minutes)\"\n                              style={styles.axisLabel}\n                />\n                <VictoryAxis\n                    standalone={false}\n                    style={styles.timeAxis}\n                    tickValues={ticks}\n                    tickFormat={\n                      (x) => {\n                          if (x % 60 === 0) {\n                              let date = new Date(new Date(this.props.startTime).getTime() +\n                                                  (x * 60 * 1000));\n                              let formatted = date.toLocaleTimeString('en-US',\n                                  { hour: '2-digit', minute: '2-digit', 'hour12': false });\n                              // strip leading zeros: https://stackoverflow.com/a/8276474\n                              return formatted.replace(/^0+/, '');\n                          }\n                          return '';\n                      }\n                    }\n              />\n              <VictoryAxis dependentAxis\n                orientation=\"left\"\n                standalone={false}\n                style={styles.minutesAxis}\n              />\n            </VictoryChart>\n            </>\n        );\n    }\n}\n\nexport default WaitTimeChart;\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport FormControl from 'react-bootstrap/FormControl'\nimport ModelParam from './ModelParam'\nimport WaitTimeChart from './WaitTimeChart'\nimport { simulateMdc, normalizedLambdas } from './queue'\n\n/* --- Start constants --- */\n/* Monte Carlo parameters */\n\n// TODO: this could be adaptive\n// (figure out time per sim and do N seconds' worth of simulation)\nconst N_RUNS = 200; // number of Monte Carlo simulations\n\n/* Day lengths */\nconst DAYS = {\n    8: {\n        'start': new Date(2020, 1, 1, 8, 0, 0),\n        'end': new Date(2020, 1, 1, 16, 0, 0)\n    }, // 8-hour day (8 a.m. – 4 p.m.)\n    10: {\n        'start': new Date(2020, 1, 1, 8, 0, 0),\n        'end': new Date(2020, 1, 1, 18, 0, 0)\n    }, // 10-hour day (8 a.m. – 6 p.m.)\n    12: {\n        'start': new Date(2020, 1, 1, 8, 0, 0),\n        'end': new Date(2020, 1, 1, 20, 0, 0)\n    }, // 12-hour day (8 a.m. – 8 p.m.)\n    14: {\n        'start': new Date(2020, 1, 1, 8, 0, 0),\n        'end': new Date(2020, 1, 1, 22, 0, 0)\n    } // 14-hour day (8 a.m. – 10 p.m.)\n};\nconst DEFAULT_DAY = 12; // Use 12-hour day by default\nconst MIN_TIME = new Date(2020, 1, 1, 8, 0, 0);\n\n/* Demand scenarios */\nfunction mealtimes(increase) {\n    return [\n        // peak breakfast period: 8:30 a.m. – 9:30 a.m.\n        {'start': MIN_TIME, 'demand': 1},\n        {'start': new Date(2020, 1, 1, 8, 30, 0), 'demand': increase},\n        {'start': new Date(2020, 1, 1, 9, 30, 0), 'demand': 1},\n        // peak lunch period: 11:30 a.m. – 12:30 a.m.\n        {'start': new Date(2020, 1, 1, 11, 30, 0), 'demand': increase},\n        {'start': new Date(2020, 1, 1, 12, 30, 0), 'demand': 1},\n        // peak dinner period: 5:00 p.m. – 6:00 p.m.\n        {'start': new Date(2020, 1, 1, 17, 0, 0), 'demand': increase},\n        {'start': new Date(2020, 1, 1, 18, 0, 0), 'demand': 1},\n    ]\n}\n\nconst SCENARIOS = {\n    'Uniform demand': [\n        {'start': MIN_TIME, 'demand': 1}\n    ],\n    'Peaks around mealtimes (3x increase)': mealtimes(3),\n    'Peaks around mealtimes (5x increase)': mealtimes(5),\n    'Peaks around mealtimes (7x increase)': mealtimes(7),\n};\nconst DEFAULT_SCENARIO = 'Peaks around mealtimes (5x increase)';\n/* --- End constants --- */\n\nclass WaitTimeInteractive extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numPeople: 1500,\n            numStudents: 1200,\n            numStaff: 300,\n            numPeopleTestingStations: 30,\n            numStudentTestingStations: 22,\n            numStaffTestingStations: 8,\n            minutesPerTest: 8,\n            peopleScenario: DEFAULT_SCENARIO,\n            studentScenario: DEFAULT_SCENARIO,\n            staffScenario: DEFAULT_SCENARIO,\n            dayLength: DEFAULT_DAY,\n            separateStudentsStaff: false,\n            simRunning: false\n        };\n        this.updateChart = this.updateChart.bind(this);\n        this.onSeparationChange = this.onSeparationChange.bind(this);\n        this.onParamChange = this.onParamChange.bind(this);\n        this.onSelectChange = this.onSelectChange.bind(this);\n    }\n\n    /*\n     * generic `onChange` handler:\n     * https://medium.com/front-end-weekly/react-quick-tip-easy-data-\n     * binding-with-a-generic-onchange-handler-fb0254a7094e\n     */\n    onSeparationChange(e) {\n        this.setState({ [e.target.name]: e.target.checked },\n            function() {\n                if (this.state.studentHists === undefined ||\n                    this.state.staffHists === undefined ||\n                    this.state.peopleHists === undefined) {\n                    this.updateChart();\n                }\n            }\n        );\n    }\n\n    onParamChange(e)  {\n        console.log(\"id:\", e.target.id);\n        console.log(\"value:\", e.target.value);\n        this.setState({ [e.target.id]: e.target.value });\n    }\n\n    onSelectChange(e) {\n        this.setState({ [e.target.id]: e.target.value });\n    } \n\n    componentDidMount() {\n        this.updateChart();\n    }\n\n    updateChart() {\n        this.setState({ 'simRunning': true });\n        let start = DAYS[this.state.dayLength]['start'];\n        let end = DAYS[this.state.dayLength]['end'];\n        let testLength = this.state.minutesPerTest;\n        if (this.state.separateStudentsStaff === true) {\n            let nStudents = parseInt(this.state.numStudents);\n            let nStaff = parseInt(this.state.numStaff);\n            let scStudents = SCENARIOS[this.state.studentScenario];\n            let scStaff = SCENARIOS[this.state.staffScenario];\n            let nStudentStations = parseInt(this.state.numStudentTestingStations);\n            let nStaffStations = parseInt(this.state.numStaffTestingStations);\n\n            let studentLambdas = normalizedLambdas(nStudents, scStudents, start, end, 1);\n            let staffLambdas = normalizedLambdas(nStaff, scStaff, start, end, 1);\n            let studentHists = simulateMdc(studentLambdas, nStudentStations, testLength, N_RUNS);\n            let staffHists = simulateMdc(staffLambdas, nStaffStations, testLength, N_RUNS);\n            this.setState({'studentHists': studentHists, 'staffHists': staffHists});\n        } else {\n            let nPeople = parseInt(this.state.numPeople);\n            let nPeopleStations = parseInt(this.state.numPeopleTestingStations);\n            let scPeople = SCENARIOS[this.state.peopleScenario];\n            let peopleLambdas = normalizedLambdas(nPeople, scPeople, start, end, 1);\n            let peopleHists = simulateMdc(peopleLambdas, nPeopleStations, testLength, N_RUNS);\n            this.setState({'peopleHists': peopleHists});\n        }\n        this.setState({'startTime': start, 'endTime': end, 'simRunning': false});\n    }\n\n    scenarioOptions() {\n        let scenarios = Object.keys(SCENARIOS).sort();\n        return scenarios.map(s => {\n            return <option key={s} value={s}>{s}</option>;\n        });\n    }\n\n    render() {\n        return (\n            <Container className=\"wait-time-interactive\">\n                <div className=\"wait-time-chart\">\n                    {(() => {\n                        if (this.state.simRunning) {\n                            return (\n                                <div class=\"wait-time-progress\">\n                                    <ProgressBar animated now={100} />\n                                </div>\n                            );\n                        } else {\n                            return (\n                                <WaitTimeChart separateStudentsStaff={this.state.separateStudentsStaff}\n                                               peopleHists={this.state.peopleHists}\n                                               studentHists={this.state.studentHists} \n                                               staffHists={this.state.staffHists}\n                                               startTime={this.state.startTime}\n                                               endTime={this.state.endTime}\n                                />\n                            );\n                        }\n                    })()}\n                </div>\n                <div className=\"wait-time-params\">\n                    <Form>\n                        <Form.Group as={Row} className=\"justify-content-center\" controlId=\"separateStudentsStaff\">\n                            <Col sm={4}>\n                                <Form.Check type=\"checkbox\"\n                                            name=\"separateStudentsStaff\"\n                                            label=\"Separate students and staff\"\n                                            checked={this.state.separateStudentsStaff}\n                                            onChange={this.onSeparationChange} />\n                            </Col>\n                        </Form.Group>\n                        {(() => {\n                            if (this.state.separateStudentsStaff) {\n                                return (\n                                    <>\n                                    <ModelParam controlId=\"numStudents\"\n                                                defaultValue={this.state.numStudents}\n                                                onChange={this.onParamChange}\n                                                label=\"students per day\" />\n                                    <ModelParam controlId=\"numStaff\"\n                                                defaultValue={this.state.numStaff}\n                                                onChange={this.onParamChange}\n                                                label=\"staff per day\" />\n                                    <ModelParam controlId=\"numStudentTestingStations\"\n                                                defaultValue={this.state.numStudentTestingStations}\n                                                onChange={this.onParamChange}\n                                                label=\"student testing lines\" />\n                                    <ModelParam controlId=\"numStaffTestingStations\"\n                                                defaultValue={this.state.numStaffTestingStations}\n                                                onChange={this.onParamChange}\n                                                label=\"staff testing lines\" />\n                                    </>\n                                );\n                            } else {\n                                return (\n                                    <>\n                                    <ModelParam controlId=\"numPeople\"\n                                                defaultValue={this.state.numPeople}\n                                                onChange={this.onParamChange}\n                                                label=\"people per day\" />\n                                    <ModelParam controlId=\"numPeopleTestingStations\"\n                                                defaultValue={this.state.numPeopleTestingStations}\n                                                onChange={this.onParamChange}\n                                                label=\"testing lines\" />\n                                    </>\n                                );\n                            }\n                        })()}\n\n                        <ModelParam controlId=\"minutesPerTest\"\n                                    defaultValue={this.state.minutesPerTest}\n                                    onChange={this.onParamChange}\n                                    label=\"minutes per test\" />\n\n\n                        {(() => {\n                            if (this.state.separateStudentsStaff) {\n                                // TODO: turn this into a proper component if it gets reused again\n                                return (\n                                    <>\n                                    <Form.Group as={Row} controlId=\"studentScenario\">\n                                        <Col sm={4} />\n                                        <Col sm={4}>\n                                            <FormControl as=\"select\"\n                                                         key=\"studentScenario\"\n                                                         defaultValue={this.state.studentScenario}\n                                                         onChange={this.onSelectChange}>\n                                                {this.scenarioOptions()}\n                                            </FormControl>\n                                        </Col>\n                                        <Form.Label column sm={3}>(students)</Form.Label>\n                                    </Form.Group>\n                                    <Form.Group as={Row} controlId=\"staffScenario\">\n                                        <Col sm={4} />\n                                        <Col sm={4}>\n                                            <FormControl as=\"select\"\n                                                         key=\"staffScenario\"\n                                                         defaultValue={this.state.staffScenario}\n                                                         onChange={this.onSelectChange}>\n                                                {this.scenarioOptions()}\n                                            </FormControl>\n                                        </Col>\n                                        <Form.Label column sm={3}>(staff)</Form.Label>\n                                    </Form.Group>\n                                    </>\n                                );\n                            } else {\n                                return (\n                                    <Form.Group as={Row} className=\"justify-content-center\" controlId=\"peopleScenario\">\n                                        <Col sm={4}>\n                                            <FormControl as=\"select\"\n                                                         key=\"peopleScenario\"\n                                                         defaultValue={this.state.peopleScenario}\n                                                         onChange={this.onSelectChange}>\n                                                {this.scenarioOptions()}\n                                            </FormControl>\n                                        </Col>\n                                    </Form.Group>\n                                );\n                            }\n                        })()}\n\n                        <Form.Group as={Row} className=\"justify-content-center\" controlId=\"dayLength\">\n                            <Col sm={4}>\n                                <FormControl as=\"select\"\n                                             key=\"dayLength\"\n                                             defaultValue={this.state.dayLength}\n                                             onChange={this.onSelectChange}>\n                                    {(() => {\n                                        let hours = Object.keys(DAYS).map(s => parseInt(s));\n                                        hours = hours.sort((a, b) => a - b);\n                                        return hours.map(hr => {\n                                            return <option key={hr} value={hr}>{hr}-hour day</option>;\n                                        });\n                                    })()}\n                                </FormControl>\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} className=\"justify-content-center\" controlId=\"simulateButton\">\n                            <Col sm={4}>\n                                <Button variant=\"primary\"\n                                        type=\"button\"\n                                        className=\"simulate-button\"\n                                        onClick={this.updateChart}>Simulate</Button>\n                            </Col>\n                        </Form.Group>\n                    </Form>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default WaitTimeInteractive;\n","import React from 'react';\nimport logo from './logo.svg'\nimport Container from 'react-bootstrap/Container'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport WaitTimeInteractive from './WaitTimeInteractive'\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"site-header\">\n                    <nav className=\"site-nav\">\n                        <a href=\"https://mggg.org\"><img src={logo} alt=\"MGGG\" className=\"logo\" /></a>\n                    </nav>\n                </header>\n\n                <main>\n                    <section className=\"interactive\">\n                        <Jumbotron fluid className=\"lead\">\n                            <Container>\n                                <div className=\"lead-text\">\n                                    <h1>Queueing for Campus Coronavirus Testing</h1>\n                                    <h2>or how to avoid long lines</h2>\n                                    <p>Short explainer text here</p>\n                                </div>\n                                <div className=\"model-dropdown\">\n                                </div>\n                            </Container>\n                        </Jumbotron>\n                        <WaitTimeInteractive />\n                    </section>\n                    <hr />\n\n                    <section className=\"info\">\n                        <h2>How should I use this?</h2>\n                        <p>99th-percentile events might be important. Or they might not be. Who knows?</p>\n                        <p>Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.</p>\n                        <p>Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.</p>\n                        <p>Turnip greens yarrow ricebean rutabaga endive cauliflower sea lettuce kohlrabi amaranth water spinach avocado daikon napa cabbage asparagus winter purslane kale. Celery potato scallion desert raisin horseradish spinach carrot soko. Lotus root water spinach fennel kombu maize bamboo shoot green bean swiss chard seakale pumpkin onion chickpea gram corn pea. Brussels sprout coriander water chestnut gourd swiss chard wakame kohlrabi beetroot carrot watercress. Corn amaranth salsify bunya nuts nori azuki bean chickweed potato bell pepper artichoke.</p>\n                    </section>\n                    <hr />\n\n                    <section className=\"info\">\n                        <h2>More about the model</h2>\n                        <p>Queueing theory bla bla bla...</p>\n                        <p>Celery quandong swiss chard chicory earthnut pea potato. Salsify taro catsear garlic gram celery bitterleaf wattle seed collard greens nori. Grape wattle seed kombu beetroot horseradish carrot squash brussels sprout chard.</p>\n                        <p>Beetroot water spinach okra water chestnut ricebean pea catsear courgette summer purslane. Water spinach arugula pea tatsoi aubergine spring onion bush tomato kale radicchio turnip chicory salsify pea sprouts fava bean. Dandelion zucchini burdock yarrow chickpea dandelion sorrel courgette turnip greens tigernut soybean radish artichoke wattle seed endive groundnut broccoli arugula.</p>\n                    </section>\n                </main>\n                \n                <footer className='footer mt-auto py-3'>\n                    <p>This is a summer 2020 project of <a href=\"https://mggg.org\">MGGG Redistricting Lab</a> at Tufts University&apos;s <a href=\"https://tischcollege.tufts.edu/\">Jonathan M. Tisch College of Civic Life</a> with assistance from <a href=\"https://pjrule.github.io/\">Parker J. Rule</a>. We are grateful for the major support of the National Science Foundation through the RAPID award OIA-2029788, Campus Coronavirus Response.</p>\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}